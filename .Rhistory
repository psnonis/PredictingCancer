library(usmap)
install.packages(usmap,dependencies=TRUE)
install.packages('usmap',dependencies=TRUE)
qtm
library(XLConnect)    # for loadWorkbook(...) and readWorksheet(...)
library(rgdal)        # for readOGR(...)
library(RcolorBrewer) # for brewer.pal(...)
library(data.table)
setwd(" < directory with all your files > ")
wb <- loadWorkbook("DataDownload.xls")   # from the USDA website
df <- readWorksheet(wb,"HEALTH")         # this sheet has the obesity data
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
obesity.data <- data.table(df)
setkey(obesity.data,FIPS)
county.data[obesity.data,obesity:=PCT_OBESE_ADULTS10]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,obesity:=obesity]
ggplot(map.df, aes(x=long, y=lat, group=group, fill=obesity)) +
scale_fill_gradientn("",colours=brewer.pal(9,"YlOrRd"))+
geom_polygon()+coord_map()+
labs(title="2010 Adult Obesity by Country, percent",x="",y="")+
theme_bw()
install.packages( 'rgdal', dependencies = TRUE)
install.packages('tidyverse',dependencies=TRUE)
counties <- readRDS('counties.Rds')
View(obesity.data)
View(counties)
library(usmap)
county_map <- us_map(regions = "counties")
View(county_map)
plot_usmap()
plot_countymap()
library(ggplot2)
blank_county_map <- plot_usmap("counties")
blank_county_map
install.packages('dplyr', dependencies =TRUE)
install.packages('shiny', dependencies =TRUE)
install.packages('maptools',dependencies=TRUE)
install.packages('tmap',dependencies=TRUE)
install.packages('maps',dependencies=T)
county()
library(maps)
county
county.fips
Cancer = read.csv('cancer.csv')
Cancer$Geography
county.fips
france
map(county)
map('county')
borders(database = "world", regions = ".", fill = NA, colour = "grey50",
xlim = NULL, ylim = NULL, ...)
borders(database = "world", regions = ".", fill = NA, colour = "grey50",
xlim = NULL, ylim = NULL)
borders(database = "world", regions = ".", fill = NA, colour = "grey50",
xlim = NULL, ylim = NULL)
ia <- map_data("county", "iowa")
mid_range <- function(x) mean(range(x))
seats <- plyr::ddply(ia, "subregion", plyr::colwise(mid_range, c("lat", "long")))
ggplot(ia, aes(long, lat)) +
geom_polygon(aes(group = group), fill = NA, colour = "grey60") +
geom_text(aes(label = subregion), data = seats, size = 2, angle = 45)
data(us.cities)
capitals <- subset(us.cities, capital == 2)
ggplot(capitals, aes(long, lat)) +
borders("state") +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
# Same map, with some world context
ggplot(capitals, aes(long, lat)) +
borders("world", xlim = c(-130, -60), ylim = c(20, 50)) +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
map('county', 'iowa', fill = TRUE, col = palette())
?map
map('county', 'iowa', fill = TRUE, col = palette(), boundary=FALSE)
?map
map('county', 'iowa', fill = TRUE, col = palette(), myborder = 0)
?map
map('county', fill = TRUE, col = palette(), myborder = 0)
library("dplyr")
qtm(US)
library(tmap)
qtm(US)
append_data
qtm()
data(World, rivers, metro)
qtm(World)
data(US)
data(Us)
qtm(World, fill = "economy", format = "World", style = "col_blind")
qtm(World, fill="HPI", fill.n = 9, fill.palette = "div",
fill.title = "Happy Planet Index", fill.id = "name",
style = "gray", format = "World")
data(NLD_prov)
m1 <- tm_shape(NLD_prov) +
tm_polygons("yellow") +
tm_facets(along = "name")
tmap_animation(m1, filename="Dutch_provinces.gif", width=800, delay=40)
data(World, metro)
m2 <- tm_shape(World, simplify = 0.5) +
tm_fill() +
tm_shape(metro) +
tm_bubbles(size = paste0("pop", seq(1970, 2030, by=10)),
col = "purple",
border.col = "black", border.alpha = .5,
scale = 2) +
tm_facets(free.scales.symbol.size = FALSE, nrow=1,ncol=1) +
tm_format("World", scale=.5)
tmap_animation(m2, filename="World population.gif", width=1200, delay=100)
tm_shape(World) +
tm_fill() +
tm_shape(rivers) +
tm_lines(col="black", lwd="scalerank", scale=2, legend.lwd.show = FALSE) +
tm_style("cobalt", title = "Rivers of the World") +
tm_format("World")
qtm(rivers)
tm_shape(World) +
tm_fill() +
tm_shape(rivers) +
tm_lines(col="black", lwd="scalerank", scale=2, legend.lwd.show = FALSE) +
tm_style("cobalt", title = "Rivers of the World") +
tm_format("World")
library(tmaptools)
tm_shape(World) +
tm_fill() +
tm_shape(rivers) +
tm_lines(col="black", lwd="scalerank", scale=2, legend.lwd.show = FALSE) +
tm_style("cobalt", title = "Rivers of the World") +
tm_format("World")
tm_shape(World) +
tm_fill() +
tm_shape(rivers) +
tm_lines(col="black", lwd="scalerank", scale=2, legend.lwd.show = FALSE) +
tm_format("World")
tm_shape(World) +
tm_fill() +
tm_shape(rivers) +
tm_lines(col="black", lwd="scalerank", scale=2, legend.lwd.show = FALSE)
tm_shape(World)
tm_shape(World)+tm_fill()
tm_shape(World)+tm_fill()+tm_shape(rivers)
tm_shape(World)+tm_fill()+tm_shape(rivers)+tm_lines(col="black")
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style("gray") +
tm_format("World", frame.lwd = 2)
tmap_save(m1, "bubble.png", width = 6.125, height = 3, scale = .75, dpi = 300, asp = 0, outer.margins = 0)
library("tmap") # required version 2.0 or later
library("tmaptools") # required version 2.0 or later
data("World", "metro", package = "tmap")
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style("gray") +
tm_format("World", frame.lwd = 2)
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style_grey() +
tm_format("World", frame.lwd = 2)
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style_grey() +
tm_format_World(frame.lwd = 2)
m1
get_US_county_2010_shape <- function() {
dir <- tempdir()
download.file("http://www2.census.gov/geo/tiger/GENZ2010/gz_2010_us_050_00_20m.zip", destfile = file.path(dir, "gz_2010_us_050_00_20m.zip"))
unzip(file.path(dir, "gz_2010_us_050_00_20m.zip"), exdir = dir)
US <- read_shape(file.path(dir, "gz_2010_us_050_00_20m.shp"))
levels(US$NAME) <- iconv(levels(US$NAME), from = "latin1", to = "utf8")
US
}
US <- get_US_county_2010_shape()
qtm(US)
US$STATE
US$COUNTY
US$FIPS <- paste0(US$STATE, US$COUNTY)
US$FIPS
US <- append_data(US, FEA, key.shp = "FIPS", key.data = "FIPS", ignore.duplicates = TRUE)
US <- append_data(US, key.shp = "FIPS", key.data = "FIPS", ignore.duplicates = TRUE)
get_food_envir_data <- function() {
dir <- tempdir()
if (!file.exists(file.path(dir, "DataDownload.xls"))) {
download.file("https://www.ers.usda.gov/webdocs/DataFiles/48731/February2014.xls?v=41688", destfile = file.path(dir, "DataDownload.xls"), mode = "wb")
}
res <- tryCatch({
read_excel(file.path(dir, "DataDownload.xls"), sheet = "HEALTH")
}, error = function(e) {
stop("The excel file cannot be read. Please open it, and remove all sheets except HEALTH. The location of the file is: ", normalizePath(file.path(dir, "DataDownload.xls")))
})
}
FEA <- get_food_envir_data()
US
view(US)
View(US)
Cancer <- read.csv('cancer.csv')
(hist(Cancer$AvgHouseholdSize))
(hist(Cancer$AvgHouseholdSize), labels = TRUE)
(hist(Cancer$AvgHouseholdSize, labels = TRUE))
(labplot(Cancer$AvgHouseholdSize, labels = TRUE))
(boxplot(Cancer$AvgHouseholdSize, labels = TRUE))
(barplot(Cancer$AvgHouseholdSize, labels = TRUE))
axis(1, h$mids, padj = -1.5)
h <- hist(Cancer$AvgHouseholdSize, labels = TRUE)
plot(h, xaxt = "n", col = "pink")
axis(1, h$mids, padj = -1.5)
axis(1, h$mids, tick = FALSE, padj = -1.5)
h <- hist(Cancer$AvgHouseholdSize, labels = TRUE)
plot(h, xaxt = "n", col = "pink")
axis(1, h$mids, tick = FALSE, padj = -1.5)
h <- hist(Cancer$AvgHouseholdSize, labels = TRUE)
h <- hist(Cancer$AvgHouseholdSize, labels = TRUE, col = "pink")
h <- hist(Cancer$AvgHouseholdSize, labels = TRUE, col = "pink", breaks = 5)
summary(Cancer$AvgHouseholdSize)
View(Cancer)
?filter
filter(Cancer, Cancer$AvgHouseholdSize < 2.0 )
Cancer$AvgHouseholdSize < 2.0
Cancer$AvgHouseholdSize[Cancer$AvgHouseholdSize < 2.0]
sort(Cancer$AvgHouseholdSize[Cancer$AvgHouseholdSize < 2.0])
summary(Cancer$AvgHouseholdSize)
Cancer$Geography[Cancer$AvgHouseholdSize < 2.0]
Cancer$Geography.strsplit()
sapply(Cancer$Geography,strsplit)
sapply(Cancer$Geography,strsplit, ', ')
sapply(strsplit(Cancer$Geography, ", "))
sapply(strsplit(Cancer$Geography, ", "), "[", 2)
sapply(strsplit(Cancer$Geography, ","), "[", 2)
sapply(strsplit(Cancer$Geography, ','), "[", 2)
sapply(strsplit(Cancer$Geography), "[", 2)
sapply(strsplit(Cancer$Geography, ":"), "[", 2)
library(tidyverse)
library("tidyverse", lib.loc="C:/AC3/Lib/R/library")
detach("package:tidyverse", unload=TRUE)
?seperate
strsplit( Cancer$Geography, ", ")
strsplit( Cancer$Geography, split = ", ")
strsplit( Cancer$Geography[0], split = ", ")
Cancer$Geography[0]
Cancer$Geography
Cancer$Geography[1]
Cancer$Geography[0]
x = Cancer$Geography[1]
x
Cancer <- read.csv('cancer.csv', header = T, as.is = T)
View(Cancer)
strsplit( Cancer$Geography, split = ", ")
seperate
strsplit(Cancer$Geography, sep = ", ")
library(tidyr)
seperate(Cancer$Geography, sep = ", ")
library(dplyr)
library(tidyr)
seperate(Cancer$Geography, sep = ", ")
separate(Cancer$Geography, sep = ", ")
separate(Cancer, col = Geography, into c("County","State") sep = ", ")
separate(Cancer, col = Geography, into = c("County","State") sep = ", ")
separate(Cancer, col = Geography, into = c("County","State"), sep = ", ")
separate(Cancer, col = Geography, into = c("County","State"), sep = " County, ")
separate(Cancer, col = Geography, into = c("County","State"), sep = ", ")
separate(Cancer, col = Geography, into = c("County","State"), sep = ", ", remove = FALSE)
Cancer <- separate(Cancer, col = Geography, into = c("County","State"), sep = ", ", remove = FALSE)
County <- read.csv('county.csv', header = T, as.is = T)
View(County)
County <- read.csv('county.csv', header = T, as.is = T, colClasses = c('character'))
County2 <- unite( FIPS, StateFP, CountyFP)
County2 <- unite( 'FIPS', 'StateFP', 'CountyFP')
?unite
County2 <- unite(County, col = FIPS, 'StateFP', 'CountyFP', remove = FALSE)
View(County2)
County2 <- unite(County, col = FIPS, 'StateFP', 'CountyFP', sep = '', remove = FALSE)
Write.csv( County2, "county2.csv")
write.csv( County2, "county2.csv")
County <- read.csv('county.csv', header = T, as.is = T)
County <- read.csv('county.csv', header = T, as.is = T, colClasses = c('character'))
metro$growth <- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100
## install.packages(c("tmap", "tmaptools"))
library("tmap") # required version 2.0 or later
library("tmaptools") # required version 2.0 or later
data("World", "metro", package = "tmap")
metro$growth <- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100
tmap_save(m1, "bubble.png", width = 6.125, height = 3, scale = .75, dpi = 300, asp = 0, outer.margins = 0)
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style("gray") +
tm_format("World", frame.lwd = 2)
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style_gray() +
tm_format_World( frame.lwd = 2)
m1 <- tm_shape(World) +
tm_polygons("income_grp", palette = "-Blues",
title = "Income class", contrast = 0.7, border.col = "grey30", id = "name") +
tm_text("iso_a3", size = "AREA", col = "grey30", root = 3) +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth", border.col = "black",
border.alpha = 0.5,
breaks = c(-Inf, 0, 2, 4, 6, Inf) ,
palette = "-RdYlGn",
title.size = "Metro population (2010)",
title.col = "Annual growth rate (%)",
id = "name",
popup.vars = c("pop2010", "pop2020", "growth")) +
tm_style_gray() +
tm_format_World( frame.lwd = 2)
m1
get_US_county_2010_shape <- function() {
dir <- tempdir()
download.file("http://www2.census.gov/geo/tiger/GENZ2010/gz_2010_us_050_00_20m.zip", destfile = file.path(dir, "gz_2010_us_050_00_20m.zip"))
unzip(file.path(dir, "gz_2010_us_050_00_20m.zip"), exdir = dir)
US <- read_shape(file.path(dir, "gz_2010_us_050_00_20m.shp"))
levels(US$NAME) <- iconv(levels(US$NAME), from = "latin1", to = "utf8")
US
}
US <- get_US_county_2010_shape()
us1 <- qtm(US)
us1
US$STATE
ip <- as.data.frame(installed.packages())
head(ip)
subset(ip, grepl("MRO"m ip$LibPath))
subset(ip, grepl("MRO", ip$LibPath))
subset(ip, !grepl("MRO", ip$LibPath))
ip <- subset(ip, !grepl("MRO", ip$LibPath))
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <-ip[,1]
head(pkgs.to.remove)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
View(m1)
View(ip)
library(urbnmapr)
install.packages('urbnmapr')
library(urbnmapr)
version
require(installr)
install.packages("installer")

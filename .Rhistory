theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', fullrange = T)
}
yxScatter(Cancer$avgAnnCount)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y, aes(shape = 21)) +
geom_point(size = 4, alpha = 0.5, colour = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', fullrange = T)
}
yxScatter(Cancer$avgAnnCount)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y, aes = (shape = 21)) +
geom_point(size = 4, alpha = 0.5, colour = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', fullrange = T)
}
yxScatter(Cancer$avgAnnCount)
qplot(Cancer$avgAnnCount)
qplot(Cancer$avgAnnCount) + geom_point()
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point()
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 4)
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 4, color = Cancer$color)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y) +
geom_point(size = 4, alpha = 0.5, color = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', fullrange = T)
}
yxScatter(Cancer$avgAnnCount)
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 4, color = Cancer$color) + theme_wsj()
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 4, alpha = 0.5, color = Cancer$color) + theme_wsj()
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 4, alpha = 0.5, color = Cancer$color)
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( shape = 2, size = 4, alpha = 0.5, color = Cancer$color)
qplot(Cancer$avgAnnCount, Cancer$popEst2015) + geom_point( size = 16, alpha = 0.5, color = Cancer$color)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y) +
geom_point(size = 4, alpha = 0.5, color = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', lwd = 3, fullrange = T)
}
yxScatter(Cancer$popEst2015,Cancer$avgAnnCount)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y) +
geom_point(size = 4, alpha = 0.5, color = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', lwd = 3, col = 'red', fullrange = T)
}
yxScatter(Cancer$popEst2015,Cancer$avgAnnCount)
yxScatter <- function(y, x = NA, title = NA)
{
if(is.na(title))
if(is.na(x))
t <- tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1)
else
t <- paste(tail(strsplit(deparse(substitute(x)), '\\$')[[1]], 1), 'vs.', tail(strsplit(deparse(substitute(y)), '\\$')[[1]], 1))
if(is.na(x))
n <- 1:length(y)
else
n <- x
p <- qplot(n, y) +
geom_point(size = 4, alpha = 0.5, color = Cancer$color) +
theme_wsj() +
theme(legend.position = 'none',
text = element_text(size = 16, family = 'gloria'),
title = element_text(size = 30, family = 'gloria'),
plot.title = element_text(hjust = 0.5)) +
ggtitle(t)
if(is.na(x))
p
else
p + geom_smooth(method = 'lm', lwd = 3, alpha = 0.5, color = 'red', fullrange = T)
}
yxScatter(Cancer$popEst2015,Cancer$avgAnnCount)
visNetwork(nodes, links)
library(visNetwork)
library(reshape2)
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[3] = 'correlation'
names(links)[2] = 'to'
links$width <- 10^abs(links$correlation)
links$color <- ifelse(links$correlation < 0, 'red', 'green')
nodes <- data.frame('id' = names(CancerCOR[1,]))
nodes$shadow <- T
nodes$color.background <- 'tomato'
nodes$label <- nodes$id
nodes$color.border <- 'black'
nodes$color.highlight.background <- 'orange'
nodes$color.highlight.border <- 'darkred'
visNetwork(nodes, links)
CancerNUM <- Cancer[, !names(Cancer) %in% c('Geography','binnedInc','color')]
CancerCOR <- cor(CancerNUM, use = 'complete.obs')
corrplot(CancerCOR, method = 'pie', type = 'upper',  order = 'AOE', bg = 'blanchedalmond')
yxScatter(Cancer$PctBachDeg25_Over, Cancer$deathRate)
yxScatter(Cancer$medIncome, Cancer$deathRate)
yxScatter(Cancer$deathRate, Cancer$medIncome)
yxScatter(Cancer$deathRate, Cancer$PctBachDeg25_Over)
yxScatter(Cancer$deathRate, Cancer$medIncome)
source('plots.R')
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
links$width <- 10^abs(links$correlation)
links$color <- ifelse(links$correlation < 0, 'red', 'green')
nodes <- data.frame('id' = names(CancerCOR[1,]))
nodes$shadow <- T
nodes$label <- nodes$id
nodes$color.background <- 'tomato'
nodes$color.highlight.background <- 'orange'
nodes$color.border <- 'black'
nodes$color.highlight.border <- 'darkred'
visNetwork(nodes, links)
yxScatter(Cancer$deathRate, Cancer$povertyPercent)
yxScatter(Cancer$deathRate, Cancer$medIncome)
yxScatter(Cancer$deathRate, Cancer$PctHS25_Over)
yxScatter(Cancer$deathRate, Cancer$PctBachDeg25_Over)
yxScatter(Cancer$MedianAge)
corrplot(CancerCOR, method = 'pie', type = 'upper',  order = 'AOE', bg = 'blanchedalmond')
View(nodes)
View(links)
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.7)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
nodes <- data.frame('id' = names(CancerCOR[1,]))
nodes$label <- nodes$id
links$width <- 10^abs(links$correlation)
links$color <- ifelse(links$correlation < 0, 'red', 'green')
nodes$color.border <- 'black'
nodes$shadow <- T
nodes$color.highlight.background <- 'orange'
nodes$color.background <- 'tomato'
nodes$color.highlight.border <- 'darkred'
visNetwork(nodes, links)
yxScatter(Cancer$deathRate, Cancer$medIncome)
yxScatter(Cancer$deathRate, Cancer$povertyPercent)
yxScatter(Cancer$deathRate, Cancer$PctHS25_Over)
yxScatter(Cancer$deathRate, Cancer$PctBachDeg25_Over)
visNetwork(nodes, links)
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
links$width <- 10^abs(links$correlation)
nodes <- data.frame('id' = names(CancerCOR[1,]))
links$color <- ifelse(links$correlation < 0, 'red', 'green')
nodes$label <- nodes$id
nodes$shadow <- T
nodes$color.background <- 'tomato'
nodes$color.border <- 'black'
nodes$color.highlight.border <- 'darkred'
nodes$color.highlight.background <- 'orange'
visNetwork(nodes, links)
yxScatter(Cancer$deathRate, Cancer$PctBachDeg25_Over)
visNetwork(nodes, links)
View(CancerCOR)
cor(Cancer[ , c("incidenceRate", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
cor(Cancer[ , c("incidence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
cor(Cancer[ , c("incedence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
## Payman
cor(CancerNUM[ , c("incedence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
names(CancerNUM)
CancerNUM <- Cancer[, !names(Cancer) %in% c('Geography','binnedInc','color')]
cor(Cancer[ , c("incidence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
Cancer$MedianAge[Cancer$MedianAge>100] <- Cancer$MedianAge[Cancer$MedianAge>100] / 12 # correct median ages over 100 years which were provided in months
Cancer$AvgHouseholdSize[Cancer$AvgHouseholdSize<1] <- Cancer$AvgHouseholdSize[Cancer$AvgHouseholdSize<1] * 100 # correct average household sizes below 1 which were divided by 100
incidenceMean <- mean(Cancer$avgAnnCount[Cancer$avgAnnCount!=1962.667684] / Cancer$popEst2015[Cancer$avgAnnCount!=1962.667684] * 100000) # mean incidence across the u.s.
Cancer$avgAnnCount[Cancer$avgAnnCount==1962.667684] <- incidenceMean * Cancer$popEst2015[Cancer$avgAnnCount==1962.667684] / 100000 # replace anomalous values with imputation
Cancer$incidence <- Cancer$avgAnnCount / Cancer$popEst2015 * 100000 # new cancer cases per 100,000 persons per year
CancerNUM <- Cancer[, !names(Cancer) %in% c('Geography','binnedInc','color')]
CancerCOR <- cor(CancerNUM, use = 'complete.obs')
## Payman
cor(CancerNUM[ , c("incidence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")], use = "complete.obs")
cor(CancerNUM[ , names(CancerNUM)])
CancerCOR <- cor(CancerNUM[ , names(CancerNUM)], use = 'complete.obs')
corrplot(CancerCOR, method = 'pie', type = 'upper',  order = 'AOE', bg = 'blanchedalmond')
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
links$width <- 10^abs(links$correlation)
nodes <- data.frame('id' = names(CancerCOR[1,]))
nodes$label <- nodes$id
links$color <- ifelse(links$correlation < 0, 'red', 'green')
nodes$shadow <- T
nodes$color.border <- 'black'
nodes$color.highlight.background <- 'orange'
nodes$color.background <- 'tomato'
nodes$color.highlight.border <- 'darkred'
visNetwork(nodes, links)
yxScatter(Cancer$deathRate, Cancer$PctBachDeg25_Over)
yxScatter(Cancer$deathRate, Cancer$PctHS25_Over)
visNetwork(nodes, links)
cor(CancerNUM)
class( CancerNUM )
class( CancerNUM[ , c("incidence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")])
CancerPAY <- Cancer[ , c("incidence", "deathRate", "PctPrivateCoverage", "PctEmpPrivCoverage", "PctPublicCoverage")]
cor(CancerPAY, use = 'complete.obs')
links$correlation
links$to
links
links$magnitude <- abs(links$correlation)
links$width     <- 10^links$magnitude
links$color     <- ifelse(links$correlation < 0, 'red', 'green')
nodes <- data.frame('id' = names(CancerNUM))
nodes$label                      <- nodes$id
nodes$shadow                     <- T
nodes$color.background           <- 'tomato'
nodes$color.border               <- 'black'
nodes$color.highlight.background <- 'orange'
nodes$color.highlight.border     <- 'darkred'
visNetwork(nodes, links)
!names(Cancer) %in% c('Geography','binnedInc','color')
names(Cancer) %in% c('Geography','binnedInc','color')
CancerNOM <- names(Cancer)
CancerVAR <- names(Cancer)
CancerVar[-c('Geography')]
CancerVAR[-c('Geography')]
?cor
CancerCOR <- cor(CancerNUM, use = 'pairwise.complete.obs')
links <- subset(melt(CancerCOR), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
links$width     <- 10^links$magnitude
nodes <- data.frame('id' = names(CancerNUM))
links$color     <- ifelse(links$correlation < 0, 'red', 'green')
links$magnitude <- abs(links$correlation)
nodes$label                      <- nodes$id
nodes$shadow                     <- T
nodes$color.background           <- 'tomato'
nodes$color.border               <- 'black'
nodes$color.highlight.background <- 'orange'
nodes$color.highlight.border     <- 'darkred'
visNetwork(nodes, links)
Cancer.Numerical   <- Cancer[, !names(Cancer) %in% c('Geography','binnedInc','color')]
Cancer.Correlation <- cor(Cancer.Numerical, use = 'pairwise.complete.obs')
corrplot(Cancer.Correlation, method = 'pie', type = 'upper',  order = 'AOE', bg = 'blanchedalmond')
nodes[nodes$from == 'deathRate']
nodes[nodes$from == 'deathRate',]
nodes[,nodes$from == 'deathRate']
links$from == 'deathRate'
links$to == 'deathRate'
links$to == 'incedenceRate'
links$from == 'incedenceRate'
links$from == 'incidenceRate'
links$to == 'incidenceRate'
links <- subset(melt(Cancer.Correlation), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
links$magnitude <- abs(links$correlation)
links$width     <- 10^links$magnitude
links$color     <- ifelse(links$correlation < 0, 'red', 'green')
nodes <- data.frame('id' = names(Cancer.Numerical))
nodes$label                      <- nodes$id
nodes$shadow                     <- T
nodes$color.border               <- 'black'
nodes$color.background           <- 'tomato'
nodes$color.highlight.background <- 'orange'
nodes$color.highlight.border     <- 'darkred'
visNetwork(nodes, links)
links$correlation
links$from == 'deathRate'
links$to   == 'deathRate'
sum(links$to   == 'deathRate')
sum(links$from == 'deathRate')
sum(links$from == 'incidenceRate')
sum(links$to   == 'incidenceRate')
source('load.R')
source('install.R')
source('load.R')
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
yxScatter(Cancer$incidence)
View(Cancer)
Cancer.Numerical   <- Cancer[, !names(Cancer) %in% c('Geography','binnedInc','color')]
Cancer.Correlation <- cor(Cancer.Numerical, use = 'pairwise.complete.obs')
corrplot(Cancer.Correlation, method = 'pie', type = 'upper',  order = 'AOE', bg = 'blanchedalmond')
corrplot(Cancer.Correlation, method = 'pie', type = 'upper',  order = 'AOE', diag = F)
corrplot(Cancer.Correlation, method = 'pie', type = 'upper',  order = 'AOE')
corrplot(Cancer.Correlation, method = 'pie', type = 'upper',  order = 'AOE', diag = F)
corrplot(Cancer.Correlation, method = 'pie', type = 'lower',  order = 'AOE', diag = F)
corrplot(Cancer.Correlation, method = 'square', type = 'lower',  order = 'AOE', diag = F)
corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'AOE', diag = F)
?corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'AOE', diag = F)
?corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'FCT', diag = F)
corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'FCT', diag = F)
corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'FPC', diag = F)
sum(links$to   == 'deathRate')
links <- subset(melt(Cancer.Correlation), value != 1.0 & abs(value) > 0.4)
links <- links[!duplicated(t(apply(links, 1, sort))),]
sum(links$from == 'deathRate')
sum(links$to   == 'deathRate')
sum(links$from == 'incidenceRate')
sum(links$to   == 'incidenceRate')
View(links)
names(links)[1] = 'from'
names(links)[2] = 'to'
names(links)[3] = 'correlation'
sum(links$from == 'deathRate')
sum(links$to   == 'deathRate')
sum(links$from == 'incidenceRate')
sum(links$to   == 'incidenceRate')
links[links$from == 'incidenceRate']
links[,links$from == 'incidenceRate']
links[links$from == 'incidenceRate',]
links[links$from ==     'deathRate',]
links$magnitude <- abs(links$correlation)
links$width     <- 10^links$magnitude
links$color     <- ifelse(links$correlation < 0, 'red', 'green')
links.deathRate     <- links[links$from ==     'deathRate',]
links.incidenceRate <- links[links$from == 'incidenceRate',]
links.deathRate
links.deathRate$from
unique(links.deathRate$from)
unique(links.deathRate$from+links.deathRate$to)
unique(links.deathRate$from + links.deathRate$to)
unique(links.deathRate$from)
View(links.incidenceRate)
View(links.deathRate)
unique(links.deathRate$to)
nodes <- data.frame('id' = names(Cancer.Numerical))
nodes$label                      <- nodes$id
nodes$shadow                     <- T
nodes$color.background           <- 'tomato'
nodes$color.border               <- 'black'
nodes$color.highlight.background <- 'orange'
nodes$color.highlight.border     <- 'darkred'
visNetwork(nodes, links.deathRate)
links$magnitude <- abs(links$correlation)
links$width     <- 10^links$magnitude
links$color     <- ifelse(links$correlation < 0, 'red', 'green')
links.deathRate     <- links[links$from ==     'deathRate',]
links.incidenceRate <- links[links$from == 'incidenceRate',]
visNetwork(nodes, links.deathRate)
visNetwork(nodes, links.incedenceRate)
visNetwork(nodes, links.incidenceRate)
visNetwork(nodes, links.incidenceRate + links.deathRate)
visNetwork(nodes, c(links.incidenceRate,links.deathRate))
c(links.incidenceRate,links.deathRate)
visNetwork(nodes, rbind(links.incidenceRate,links.deathRate))
nodes$color.background[nodes$id=='deathRate'    ] = 'brown'
nodes$color.background[nodes$id=='incidenceRate'] = 'purple'
visNetwork(nodes, rbind(links.incidenceRate,links.deathRate))
nodes$color.background[nodes$id=='deathRate'    ] = 'chocolate'
visNetwork(nodes, rbind(links.incidenceRate,links.deathRate))
nodes$color.background[nodes$id=='deathRate'    ] = 'gray'
visNetwork(nodes, rbind(links.incidenceRate,links.deathRate))
nodes$color.background[nodes$id=='deathRate'    ] = 'navy'
visNetwork(nodes, rbind(links.incidenceRate,links.deathRate))
yxScatter(Cancer$incidenceRate, Cancer$AvgHouseholdSize)
yxScatter(Cancer$incidenceRate, Cancer$MedianAgeFemale)
yxScatter(Cancer$incidenceRate, Cancer$MedianAge)
yxScatter(Cancer$incidenceRate, Cancer$MedianAgeMale)
yxScatter(Cancer$incidenceRate, Cancer$PctPublicCoverage)
yxScatter(Cancer$incidenceRate, Cancer$PctEmployed16_Over)
yxScatter(Cancer$deathRate, Cancer$PctPublicCoverage)
yxScatter(Cancer$deathRate, Cancer$PctEmployed16_Over)
CShape <- read_rds('cshape.Rds') # read county geometries
warnings()
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
corrplot(Cancer.Correlation, method = 'circle', type = 'lower',  order = 'FPC', diag = F)
yxScatter(Cancer$avgAnnCount)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
yxScatter(Cancer$incidenceRate)
warnings()
windows()
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
showtext.auto()
yxScatter(Cancer$incidenceRate)
source('plots.R')
windows()
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
yxScatter(Cancer$incidenceRate)
source('install.R')
source('load.R')
source('plots.R')
windows()
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$MedianAge)
yxScatter(Cancer$incidenceRate)
yxScatter(Cancer$MedianAge)
yxScatter(Cancer$avgAnnCount)
source('plots.R')
yxScatter(Cancer$avgAnnCount)
yxScatter(Cancer$incidenceRate)
